{"version":3,"file":"Conversation-D82HCNX9.js","sources":["../../src/pages/Conversation.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useMessages } from '../contexts/MessageContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport Spinner from '../components/common/Spinner';\n\nconst Conversation: React.FC = () => {\n  const { conversationId } = useParams<{ conversationId: string }>();\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const {\n    activeChat,\n    messages,\n    loadingMessages,\n    error,\n    sendMessage,\n    setActiveChatById,\n    markChatAsRead\n  } = useMessages();\n  \n  const [newMessage, setNewMessage] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  \n  // Redirect naar login als gebruiker niet is ingelogd\n  useEffect(() => {\n    if (!currentUser) {\n      navigate('/login');\n    }\n  }, [currentUser, navigate]);\n  \n  // Stel actieve chat in als conversationId is opgegeven\n  useEffect(() => {\n    if (conversationId) {\n      setActiveChatById(conversationId);\n      // Markeer berichten als gelezen wanneer de conversatie wordt geopend\n      markChatAsRead(conversationId);\n    }\n  }, [conversationId, setActiveChatById, markChatAsRead]);\n  \n  // Scroll naar het laatste bericht als er nieuwe berichten zijn\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  // Focus op het inputveld na het versturen van een bericht\n  useEffect(() => {\n    if (activeChat) {\n      inputRef.current?.focus();\n    }\n  }, [messages.length, activeChat]);\n  \n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newMessage.trim() || !activeChat || !conversationId) return;\n    \n    // Bewaar het bericht tijdelijk\n    const messageToSend = newMessage.trim();\n    \n    // Leeg het veld onmiddellijk (voor betere gebruikservaring)\n    setNewMessage('');\n    \n    try {\n      // Verstuur het bewaarde bericht\n      await sendMessage(conversationId, messageToSend);\n    } catch (err) {\n      console.error('Fout bij het versturen van bericht:', err);\n      // Als er een fout optreedt, herstel het bericht in het veld\n      setNewMessage(messageToSend);\n    }\n  };\n  \n  const formatTimestamp = (timestamp: any) => {\n    if (!timestamp) return '';\n    \n    const date = timestamp.toDate();\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    \n    if (date.toDateString() === today.toDateString()) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Gisteren';\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-lg shadow-lg overflow-hidden max-w-4xl mx-auto min-h-[70vh] flex flex-col\">\n          {!conversationId || !activeChat ? (\n            <div className=\"flex justify-center items-center h-full\">\n              <Spinner />\n            </div>\n          ) : (\n            <>\n              {/* Berichtenkop */}\n              <div className=\"p-4 bg-gray-50 border-b flex items-center gap-3\">\n                <button \n                  onClick={() => navigate('/messages')}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                  </svg>\n                </button>\n                \n                {activeChat.otherUser.photoURL ? (\n                  <img\n                    src={activeChat.otherUser.photoURL}\n                    alt={activeChat.otherUser.displayName}\n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center text-md font-medium text-gray-600\">\n                    {activeChat.otherUser.displayName.substring(0, 1).toUpperCase()}\n                  </div>\n                )}\n                <div>\n                  <h2 className=\"font-semibold\">{activeChat.otherUser.displayName}</h2>\n                  <p className=\"text-sm text-gray-500\">{activeChat.otherUser.role}</p>\n                </div>\n              </div>\n              \n              {/* Berichten */}\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-4 min-h-[calc(70vh-8rem)]\">\n                {loadingMessages ? (\n                  <div className=\"flex justify-center items-center h-full\">\n                    <Spinner />\n                  </div>\n                ) : messages.length === 0 ? (\n                  <div className=\"text-center text-gray-500 mt-10\">\n                    Geen berichten. Stuur een bericht om het gesprek te starten.\n                  </div>\n                ) : (\n                  messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${\n                        message.senderId === currentUser?.uid ? 'justify-end' : 'justify-start'\n                      }`}\n                    >\n                      <div\n                        className={`max-w-[70%] p-3 rounded-lg ${\n                          message.senderId === currentUser?.uid\n                            ? 'bg-blue-500 text-white rounded-br-none'\n                            : 'bg-gray-200 text-gray-800 rounded-bl-none'\n                        }`}\n                      >\n                        <p>{message.text}</p>\n                        <div\n                          className={`text-xs mt-1 ${\n                            message.senderId === currentUser?.uid ? 'text-blue-100' : 'text-gray-500'\n                          }`}\n                        >\n                          {formatTimestamp(message.timestamp)}\n                          {message.senderId === currentUser?.uid && (\n                            <span className=\"ml-1\">\n                              {message.read ? ' â€¢ Gelezen' : ''}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n              \n              {/* Berichteninvoer */}\n              <form onSubmit={handleSendMessage} className=\"p-4 border-t\">\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    ref={inputRef}\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    placeholder=\"Typ een bericht...\"\n                    className=\"flex-1 px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <button\n                    type=\"submit\"\n                    disabled={!newMessage.trim()}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded-full disabled:opacity-50\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n                    </svg>\n                  </button>\n                </div>\n              </form>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Conversation; "],"names":["Conversation","conversationId","useParams","currentUser","useAuth","navigate","useNavigate","activeChat","messages","loadingMessages","error","sendMessage","setActiveChatById","markChatAsRead","useMessages","newMessage","setNewMessage","useState","messagesEndRef","useRef","inputRef","useEffect","_a","handleSendMessage","e","messageToSend","err","formatTimestamp","timestamp","date","today","yesterday","jsx","Spinner","jsxs","Fragment","message"],"mappings":"yOAMA,MAAMA,EAAyB,IAAM,CAC7B,KAAA,CAAE,eAAAC,CAAe,EAAIC,EAAsC,EAC3D,CAAE,YAAAC,CAAY,EAAIC,EAAQ,EAC1BC,EAAWC,EAAY,EACvB,CACJ,WAAAC,EACA,SAAAC,EACA,gBAAAC,EACA,MAAAC,EACA,YAAAC,EACA,kBAAAC,EACA,eAAAC,GACEC,EAAY,EAEV,CAACC,EAAYC,CAAa,EAAIC,EAAAA,SAAS,EAAE,EACzCC,EAAiBC,SAAuB,IAAI,EAC5CC,EAAWD,SAAyB,IAAI,EAG9CE,EAAAA,UAAU,IAAM,CACTlB,GACHE,EAAS,QAAQ,CACnB,EACC,CAACF,EAAaE,CAAQ,CAAC,EAG1BgB,EAAAA,UAAU,IAAM,CACVpB,IACFW,EAAkBX,CAAc,EAEhCY,EAAeZ,CAAc,EAE9B,EAAA,CAACA,EAAgBW,EAAmBC,CAAc,CAAC,EAGtDQ,EAAAA,UAAU,IAAM,QACdC,EAAAJ,EAAe,UAAf,MAAAI,EAAwB,eAAe,CAAE,SAAU,UAAU,EAC5D,CAACd,CAAQ,CAAC,EAGba,EAAAA,UAAU,IAAM,OACVd,KACFe,EAAAF,EAAS,UAAT,MAAAE,EAAkB,QAEnB,EAAA,CAACd,EAAS,OAAQD,CAAU,CAAC,EAE1B,MAAAgB,EAAoB,MAAOC,GAAuB,CAGtD,GAFAA,EAAE,eAAe,EAEb,CAACT,EAAW,KAAA,GAAU,CAACR,GAAc,CAACN,EAAgB,OAGpD,MAAAwB,EAAgBV,EAAW,KAAK,EAGtCC,EAAc,EAAE,EAEZ,GAAA,CAEI,MAAAL,EAAYV,EAAgBwB,CAAa,QACxCC,EAAK,CACJ,QAAA,MAAM,sCAAuCA,CAAG,EAExDV,EAAcS,CAAa,CAAA,CAE/B,EAEME,EAAmBC,GAAmB,CACtC,GAAA,CAACA,EAAkB,MAAA,GAEjB,MAAAC,EAAOD,EAAU,OAAO,EACxBE,MAAY,KACZC,EAAY,IAAI,KAAKD,CAAK,EAGhC,OAFAC,EAAU,QAAQA,EAAU,QAAQ,EAAI,CAAC,EAErCF,EAAK,aAAA,IAAmBC,EAAM,eACzBD,EAAK,mBAAmB,GAAI,CAAE,KAAM,UAAW,OAAQ,UAAW,EAChEA,EAAK,aAAmB,IAAAE,EAAU,eACpC,WAEAF,EAAK,mBAAmB,CAEnC,EAGE,OAAAG,EAAAA,IAAC,MAAI,CAAA,UAAU,0BACb,SAAAA,MAAC,OAAI,UAAU,8BACb,SAACA,EAAAA,IAAA,MAAA,CAAI,UAAU,6FACZ,UAAC/B,GAAkB,CAACM,EACnByB,EAAAA,IAAC,MAAI,CAAA,UAAU,0CACb,SAACA,EAAAA,IAAAC,EAAA,CAAA,CAAQ,CACX,CAAA,EAIEC,EAAAA,KAAAC,EAAAA,SAAA,CAAA,SAAA,CAACD,EAAAA,KAAA,MAAA,CAAI,UAAU,kDACb,SAAA,CAAAF,EAAA,IAAC,SAAA,CACC,QAAS,IAAM3B,EAAS,WAAW,EACnC,UAAU,oCAEV,SAAA2B,EAAA,IAAC,OAAI,MAAM,6BAA6B,UAAU,UAAU,KAAK,OAAO,QAAQ,YAAY,OAAO,eACjG,SAACA,EAAAA,IAAA,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,6BAA8B,CAAA,CACrG,CAAA,CAAA,CACF,EAECzB,EAAW,UAAU,SACpByB,EAAA,IAAC,MAAA,CACC,IAAKzB,EAAW,UAAU,SAC1B,IAAKA,EAAW,UAAU,YAC1B,UAAU,qCAAA,CAAA,EAGZyB,EAAAA,IAAC,MAAI,CAAA,UAAU,wGACZ,SAAAzB,EAAW,UAAU,YAAY,UAAU,EAAG,CAAC,EAAE,YACpD,CAAA,CAAA,SAED,MACC,CAAA,SAAA,CAAAyB,MAAC,KAAG,CAAA,UAAU,gBAAiB,SAAAzB,EAAW,UAAU,YAAY,QAC/D,IAAE,CAAA,UAAU,wBAAyB,SAAAA,EAAW,UAAU,IAAK,CAAA,CAAA,CAClE,CAAA,CAAA,EACF,EAGA2B,EAAAA,KAAC,MAAI,CAAA,UAAU,+DACZ,SAAA,CACCzB,EAAAuB,EAAA,IAAC,OAAI,UAAU,0CACb,eAACC,EAAQ,CAAA,CAAA,CACX,CAAA,EACEzB,EAAS,SAAW,EACrBwB,MAAA,MAAA,CAAI,UAAU,kCAAkC,SAAA,8DAAA,CAEjD,EAEAxB,EAAS,IAAK4B,GACZJ,EAAA,IAAC,MAAA,CAEC,UAAW,QACTI,EAAQ,YAAajC,GAAA,YAAAA,EAAa,KAAM,cAAgB,eAC1D,GAEA,SAAA+B,EAAA,KAAC,MAAA,CACC,UAAW,8BACTE,EAAQ,YAAajC,GAAA,YAAAA,EAAa,KAC9B,yCACA,2CACN,GAEA,SAAA,CAAC6B,EAAAA,IAAA,IAAA,CAAG,WAAQ,IAAK,CAAA,EACjBE,EAAA,KAAC,MAAA,CACC,UAAW,gBACTE,EAAQ,YAAajC,GAAA,YAAAA,EAAa,KAAM,gBAAkB,eAC5D,GAEC,SAAA,CAAAwB,EAAgBS,EAAQ,SAAS,EACjCA,EAAQ,YAAajC,GAAA,YAAAA,EAAa,MACjC6B,EAAAA,IAAC,OAAK,CAAA,UAAU,OACb,SAAAI,EAAQ,KAAO,aAAe,EACjC,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,EAzBKA,EAAQ,EAAA,CA2BhB,EAEHJ,EAAAA,IAAC,MAAI,CAAA,IAAKd,CAAgB,CAAA,CAAA,EAC5B,EAGAc,EAAAA,IAAC,QAAK,SAAUT,EAAmB,UAAU,eAC3C,SAAAW,EAAA,KAAC,MAAI,CAAA,UAAU,aACb,SAAA,CAAAF,EAAA,IAAC,QAAA,CACC,KAAK,OACL,IAAKZ,EACL,MAAOL,EACP,SAAWS,GAAMR,EAAcQ,EAAE,OAAO,KAAK,EAC7C,YAAY,qBACZ,UAAU,0FAAA,CACZ,EACAQ,EAAA,IAAC,SAAA,CACC,KAAK,SACL,SAAU,CAACjB,EAAW,KAAK,EAC3B,UAAU,oEAEV,SAAAiB,EAAA,IAAC,OAAI,MAAM,6BAA6B,UAAU,UAAU,KAAK,OAAO,QAAQ,YAAY,OAAO,eACjG,SAACA,EAAAA,IAAA,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,kCAAmC,CAAA,CAC1G,CAAA,CAAA,CAAA,CACF,CAAA,CACF,CACF,CAAA,CAAA,EACF,CAAA,CAEJ,CACF,CAAA,EACF,CAEJ"}